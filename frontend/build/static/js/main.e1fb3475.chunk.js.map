{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","sx","color","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","bg","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","Container","maxW","centerContent","Box","d","justifyContent","w","m","borderRadius","backdropFilter","Text","fontSize","fontFamily","Tabs","isFitted","variant","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","off","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","borderWidth","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","Error","fetchChats","flexDirection","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"o1MAGA,MAAMA,EAAcC,0BAmCPC,EAAYA,IAChBC,qBAAWH,GAGLI,MArCMC,IAAmB,IAAlB,SAAEC,GAAUD,EAChC,MAAOE,EAAcC,GAAmBC,sBACjCC,EAAMC,GAAWF,sBACjBG,EAAcC,GAAmBJ,mBAAS,KAC1CK,EAAOC,GAAYN,qBAEpBO,EAAUC,cAShB,OAPAC,qBAAU,KACR,MAAMC,EAAWC,KAAKC,MAAMC,aAAaC,QAAQ,aACjDZ,EAAQQ,GAEHA,GAAUH,EAAQQ,KAAK,OAC3B,CAACR,IAGFS,cAACzB,EAAY0B,SAAQ,CACnBC,MAAO,CACLpB,eACAC,kBACAE,OACAC,UACAC,eACAC,kBACAC,QACAC,YACAT,SAEDA,KCiFQsB,MAzGDA,KACZ,MAAOC,EAAMC,GAAWrB,oBAAS,GAE3BsB,EAAQC,eACPC,EAAOC,GAAYzB,sBACnB0B,EAAUC,GAAe3B,sBACzB4B,EAASC,GAAc7B,oBAAS,GACjCO,EAAUC,eACV,QAAEN,GAAYT,IAgDpB,OACEqC,eAACC,IAAM,CAACC,QAAQ,OAAMnC,SAAA,CACpBiC,eAACG,IAAW,CAACC,GAAG,QAAQC,YAAU,EAAAtC,SAAA,CAChCmB,cAACoB,IAAS,CAAAvC,SAAC,kBACXmB,cAACqB,IAAK,CACJnB,MAAOM,EACPc,KAAK,QACLC,YAAY,2BACZC,SAAWC,GAAMhB,EAASgB,EAAEC,OAAOxB,OACnCyB,GAAI,CACF,gBAAiB,CACfC,MAAO,eAKfd,eAACG,IAAW,CAACC,GAAG,WAAWC,YAAU,EAAAtC,SAAA,CACnCmB,cAACoB,IAAS,CAAAvC,SAAC,aACXiC,eAACe,IAAU,CAACC,KAAK,KAAIjD,SAAA,CACnBmB,cAACqB,IAAK,CACJnB,MAAOQ,EACPc,SAAWC,GAAMd,EAAYc,EAAEC,OAAOxB,OACtCoB,KAAMlB,EAAO,OAAS,WACtBmB,YAAY,iBACZI,GAAI,CACF,gBAAiB,CACfC,MAAO,YAIb5B,cAAC+B,IAAiB,CAACC,MAAM,SAAQnD,SAC/BmB,cAACiC,IAAM,CAACC,EAAE,UAAUJ,KAAK,KAAKK,QArFpBC,IAAM/B,GAASD,GAqF0BvB,SAChDuB,EAAO,OAAS,iBAKzBJ,cAACiC,IAAM,CACLI,YAAY,OACZL,MAAM,OACNM,MAAO,CAAEC,UAAW,IACpBJ,QAxFgBK,UAEpB,GADA3B,GAAW,IACNL,IAAUE,EASb,OARAJ,EAAM,CACJmC,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAEZhC,GAAW,GAGb,IACE,MAAMiC,EAAS,CACbC,QAAS,CACP,eAAgB,sBAGd,KAAEC,SAAeC,IAAMC,KAC3B,kBACA,CAAE1C,QAAOE,YACToC,GAEFxC,EAAM,CACJmC,MAAO,mBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZ3D,EAAQ8D,GACRnD,aAAasD,QAAQ,WAAYxD,KAAKyD,UAAUJ,IAChDnC,GAAW,GACXtB,EAAQQ,KAAK,UACb,MAAOsD,GACP/C,EAAM,CACJmC,MAAO,iBACPa,YAAaD,EAAME,SAASP,KAAKQ,QACjCd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZhC,GAAW,KA6CT4C,UAAW7C,EAAQ/B,SACpB,cCsHQ6E,MAzNAA,KACb,MAAOtD,EAAMC,GAAWrB,oBAAS,GAC3BoD,EAAcA,IAAM/B,GAASD,GAC7BE,EAAQC,cACRhB,EAAUC,eAETmE,EAAMC,GAAW5E,sBACjBwB,EAAOC,GAAYzB,sBACnB6E,EAAiBC,GAAsB9E,sBACvC0B,EAAUC,GAAe3B,sBACzB+E,EAAKC,GAAUhF,sBACfiF,EAAYC,GAAiBlF,oBAAS,GA+G7C,OACE8B,eAACC,IAAM,CAACC,QAAQ,MAAKnC,SAAA,CACnBiC,eAACG,IAAW,CAACC,GAAG,aAAaC,YAAU,EAAAtC,SAAA,CACrCmB,cAACoB,IAAS,CAAAvC,SAAC,SACXmB,cAACqB,IAAK,CACJE,YAAY,kBACZC,SAAWC,GAAMmC,EAAQnC,EAAEC,OAAOxB,OAClCyB,GAAI,CACF,gBAAiB,CACfC,MAAO,eAKfd,eAACG,IAAW,CAACC,GAAG,QAAQC,YAAU,EAAAtC,SAAA,CAChCmB,cAACoB,IAAS,CAAAvC,SAAC,kBACXmB,cAACqB,IAAK,CACJC,KAAK,QACLC,YAAY,2BACZC,SAAWC,GAAMhB,EAASgB,EAAEC,OAAOxB,OACnCiE,GAAG,cACHxC,GAAI,CACF,gBAAiB,CACfC,MAAO,eAKfd,eAACG,IAAW,CAACC,GAAG,WAAWC,YAAU,EAAAtC,SAAA,CACnCmB,cAACoB,IAAS,CAAAvC,SAAC,aACXiC,eAACe,IAAU,CAACC,KAAK,KAAIjD,SAAA,CACnBmB,cAACqB,IAAK,CACJC,KAAMlB,EAAO,OAAS,WACtBmB,YAAY,iBACZC,SAAWC,GAAMd,EAAYc,EAAEC,OAAOxB,OACtCyB,GAAI,CACF,gBAAiB,CACfC,MAAO,YAIb5B,cAAC+B,IAAiB,CAACC,MAAM,SAAQnD,SAC/BmB,cAACiC,IAAM,CAACC,EAAE,UAAUJ,KAAK,KAAKK,QAASC,EAAYvD,SAChDuB,EAAO,OAAS,iBAKzBU,eAACG,IAAW,CAACC,GAAG,WAAWC,YAAU,EAAAtC,SAAA,CACnCmB,cAACoB,IAAS,CAAAvC,SAAC,qBACXiC,eAACe,IAAU,CAACC,KAAK,KAAIjD,SAAA,CACnBmB,cAACqB,IAAK,CACJC,KAAMlB,EAAO,OAAS,WACtBmB,YAAY,mBACZC,SAAWC,GAAMqC,EAAmBrC,EAAEC,OAAOxB,OAC7CyB,GAAI,CACF,gBAAiB,CACfC,MAAO,YAIb5B,cAAC+B,IAAiB,CAACC,MAAM,SAAQnD,SAC/BmB,cAACiC,IAAM,CAACC,EAAE,UAAUJ,KAAK,KAAKK,QAASC,EAAYvD,SAChDuB,EAAO,OAAS,iBAKzBU,eAACG,IAAW,CAACC,GAAG,MAAKrC,SAAA,CACnBmB,cAACoB,IAAS,CAAAvC,SAAC,wBACXmB,cAACqB,IAAK,CACJC,KAAK,OACL8C,EAAG,IACHC,OAAO,UACP7C,SAAWC,GAvHE6C,KAEnB,GADAJ,GAAc,QACDK,IAATD,EAAJ,CAWA,GADAE,QAAQC,IAAIH,GACM,eAAdA,EAAKhD,MAAuC,cAAdgD,EAAKhD,KA4BrC,OARAhB,EAAM,CACJmC,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAEZqB,GAAc,GA3B6C,CAC3D,MAAMlB,EAAO,IAAI0B,SACjB1B,EAAK2B,OAAO,OAAQL,GACpBtB,EAAK2B,OAAO,gBAAiB,YAC7B3B,EAAK2B,OAAO,aAAc,qBAC1BC,MAAM,iEAAkE,CACtEC,OAAQ,OACRC,KAAM9B,IAEL+B,MAAMC,GAAQA,EAAIC,SAClBF,MAAM/B,IACLgB,EAAOhB,EAAKkC,IAAIC,YAChBX,QAAQC,IAAIzB,EAAKkC,IAAIC,YACrBjB,GAAc,MAEfkB,OAAOC,IACNb,QAAQC,IAAIY,GACZnB,GAAc,YA3BlB5D,EAAM,CACJmC,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,YA+GSyC,CAAY7D,EAAEC,OAAO6D,MAAM,IAC5C5D,GAAI,CACF,gBAAiB,CACfC,MAAO,eAKf5B,cAACiC,IAAM,CACLI,YAAY,OACZL,MAAM,OACNM,MAAO,CAAEC,UAAW,IACpBJ,QAnMgBK,UAEpB,GADA0B,GAAc,IACTP,IAASnD,IAAUE,IAAamD,EASnC,OARAvD,EAAM,CACJmC,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAEZqB,GAAc,GAGhB,GAAIxD,IAAamD,EAAjB,CAUAW,QAAQC,IAAId,EAAMnD,EAAOE,EAAUqD,GACnC,IACE,MAAMjB,EAAS,CACbC,QAAS,CACP,eAAgB,sBAGd,KAAEC,SAAeC,IAAMC,KAC3B,YACA,CACES,OACAnD,QACAE,WACAqD,OAEFjB,GAEF0B,QAAQC,IAAIzB,GACZ1C,EAAM,CACJmC,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZhD,aAAasD,QAAQ,WAAYxD,KAAKyD,UAAUJ,IAChDkB,GAAc,GACd3E,EAAQQ,KAAK,UACb,MAAOsD,GACP/C,EAAM,CACJmC,MAAO,iBACPa,YAAaD,EAAME,SAASP,KAAKQ,QACjCd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZqB,GAAc,SA9Cd5D,EAAM,CACJmC,MAAO,yBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,YAiLVY,UAAWQ,EAAWpF,SACvB,gBCzJQ2G,MAnDf,WACE,MAAMjG,EAAUC,cAQhB,OANAC,qBAAU,KACKE,KAAKC,MAAMC,aAAaC,QAAQ,cAEnCP,EAAQQ,KAAK,YACtB,CAACR,IAGFuB,eAAC2E,IAAS,CAACC,KAAK,KAAKC,eAAa,EAAA9G,SAAA,CAChCmB,cAAC4F,IAAG,CACFC,EAAE,OACFC,eAAe,SACf1B,EAAG,EACHD,GAAG,2BACH4B,EAAE,OACFC,EAAE,gBACFC,aAAa,KACbC,eAAe,aAAYrH,SAE3BmB,cAACmG,IAAI,CAACC,SAAS,MAAMC,WAAW,YAAYzE,MAAM,QAAO/C,SAAC,gBAI5DmB,cAAC4F,IAAG,CACFzB,GAAG,2BACH4B,EAAE,OACF3B,EAAG,EACH6B,aAAa,KACbC,eAAe,aAAYrH,SAE3BiC,eAACwF,IAAI,CAACC,UAAQ,EAACC,QAAQ,eAAc3H,SAAA,CACnCiC,eAAC2F,IAAO,CAACC,GAAG,MAAK7H,SAAA,CACfmB,cAAC2G,IAAG,CAAC/E,MAAM,QAAO/C,SAAC,UACnBmB,cAAC2G,IAAG,CAAC/E,MAAM,QAAO/C,SAAC,eAErBiC,eAAC8F,IAAS,CAAA/H,SAAA,CACRmB,cAAC6G,IAAQ,CAAAhI,SACPmB,cAACG,EAAK,MAERH,cAAC6G,IAAQ,CAAAhI,SACPmB,cAAC0D,EAAM,kB,2BCzDd,MAAMoD,EAAqBA,CAACC,EAAUf,EAAGgB,EAAGC,IAE/CD,EAAID,EAASG,OAAS,GACtBH,EAASC,EAAI,GAAGG,OAAOC,MAAQpB,EAAEmB,OAAOC,KACxCL,EAASC,GAAGG,OAAOC,MAAQH,EAEpB,GAEND,EAAID,EAASG,OAAS,GACrBH,EAASC,EAAI,GAAGG,OAAOC,MAAQpB,EAAEmB,OAAOC,KACxCL,EAASC,GAAGG,OAAOC,MAAQH,GAC5BD,IAAMD,EAASG,OAAS,GAAKH,EAASC,GAAGG,OAAOC,MAAQH,EAElD,EACG,OAGDI,EAAeA,CAACN,EAAUf,EAAGgB,EAAGC,IAEzCD,EAAID,EAASG,OAAS,IACrBH,EAASC,EAAI,GAAGG,OAAOC,MAAQpB,EAAEmB,OAAOC,UACR7C,IAA/BwC,EAASC,EAAI,GAAGG,OAAOC,MACzBL,EAASC,GAAGG,OAAOC,MAAQH,EAIlBK,EAAgBA,CAACP,EAAUC,EAAGC,IAEvCD,IAAMD,EAASG,OAAS,GACxBH,EAASA,EAASG,OAAS,GAAGC,OAAOC,MAAQH,GAC7CF,EAASA,EAASG,OAAS,GAAGC,OAAOC,IAI5BG,EAAaA,CAACR,EAAUf,EAAGgB,IAC/BA,EAAI,GAAKD,EAASC,EAAI,GAAGG,OAAOC,MAAQpB,EAAEmB,OAAOC,IAG7CI,EAAYA,CAACC,EAAYC,KAAW,IAADC,EAC9C,OAAe,QAARA,EAAAD,EAAM,UAAE,IAAAC,OAAA,EAARA,EAAUP,QAAkB,OAAVK,QAAU,IAAVA,OAAU,EAAVA,EAAYL,KAAMM,EAAM,GAAG/D,KAAO+D,EAAM,GAAG/D,M,gDC2BvDiE,MAlDMhJ,IAAyB,IAAxB,KAAEK,EAAI,SAAEJ,GAAUD,EACtC,MAAM,OAAEiJ,EAAM,OAAEC,EAAM,QAAEC,GAAYC,cAEpC,OACElH,eAAAmH,WAAA,CAAApJ,SAAA,CACGA,EACCmB,cAAA,QAAMmC,QAAS2F,EAAOjJ,SAAEA,IAExBmB,cAACkI,IAAU,CAACrC,EAAG,CAAEsC,KAAM,QAAUC,KAAMpI,cAACqI,IAAQ,IAAKlG,QAAS2F,IAEhEhH,eAACwH,IAAK,CAACxG,KAAK,KAAKiG,QAASA,EAASF,OAAQA,EAAQU,YAAU,EAAA1J,SAAA,CAC3DmB,cAACwI,IAAY,IACb1H,eAAC2H,IAAY,CAACvG,EAAE,QAAOrD,SAAA,CACrBmB,cAAC0I,IAAW,CACVtC,SAAS,OACTC,WAAW,YACXR,EAAE,OACFC,eAAe,SAAQjH,SAEtBI,EAAK0E,OAER3D,cAAC2I,IAAgB,IACjB7H,eAAC8H,IAAS,CACR/C,EAAE,OACFgD,QAAQ,SACRC,WAAW,SACXhD,eAAe,gBAAejH,SAAA,CAE9BmB,cAAC+I,IAAK,CACJ9C,aAAa,OACb+C,QAAQ,QACRC,IAAKhK,EAAK8E,IACVmF,IAAKjK,EAAK0E,OAEZ7C,eAACqF,IAAI,CACHC,SAAU,CAAE+B,KAAM,OAAQgB,GAAI,QAC9B9C,WAAW,YAAWxH,SAAA,CACvB,UACSI,EAAKuB,YAGjBR,cAACoJ,IAAW,CAAAvK,SACVmB,cAACiC,IAAM,CAACE,QAAS4F,EAAQlJ,SAAC,sB,2BCNvBwK,MAzCQzK,IAAmB,IAAlB,SAAEmI,GAAUnI,EAClC,MAAM,KAAEK,GAASR,IAEjB,OACEuB,cAACsJ,IAAc,CAAAzK,SACZkI,GACCA,EAASwC,KAAI,CAACvD,EAAGgB,IACflG,eAAA,OAAKwB,MAAO,CAAEkH,QAAS,QAAS3K,SAAA,EAC5BwI,EAAaN,EAAUf,EAAGgB,EAAG/H,EAAKmI,MAClCE,EAAcP,EAAUC,EAAG/H,EAAKmI,OAChCpH,cAACyJ,IAAO,CAACC,MAAO1D,EAAEmB,OAAOxD,KAAMgG,UAAU,eAAeC,UAAQ,EAAA/K,SAC9DmB,cAAC6J,IAAM,CACLC,GAAG,MACHC,GAAI,EACJjI,KAAK,KACLkI,OAAO,UACPrG,KAAMqC,EAAEmB,OAAOxD,KACfsF,IAAKjD,EAAEmB,OAAOpD,QAIpB/D,cAAA,QACEsC,MAAO,CACL2H,gBAAgB,GAADC,OACblE,EAAEmB,OAAOC,MAAQnI,EAAKmI,IAAM,UAAY,WAE1C+C,WAAYrD,EAAmBC,EAAUf,EAAGgB,EAAG/H,EAAKmI,KACpD7E,UAAWgF,EAAWR,EAAUf,EAAGgB,EAAG/H,EAAKmI,KAAO,EAAI,GACtDnB,aAAc,OACdmE,QAAS,WACTC,SAAU,OACVxL,SAEDmH,EAAEsE,YA1B+BtE,EAAEoB,U,+DCMnCmD,MArBO3L,IAAsC,IAArC,KAAEK,EAAI,eAAEuL,EAAc,MAAEC,GAAO7L,EACpD,OACEkC,eAAC4J,IAAK,CACJC,GAAI,EACJC,GAAI,EACJ3E,aAAa,KACbD,EAAG,EACHU,GAAI,EACJF,QAAQ,QACRJ,SAAU,GACV/D,YAAY,SACZ2H,OAAO,UACP7H,QAASqI,EAAe3L,SAAA,CAEvBI,EAAK0E,KACL8G,IAAUxL,EAAKmI,KAAOpH,cAAA,QAAAnB,SAAM,aAC7BmB,cAAC6K,IAAS,CAACC,GAAI,QCqBNC,MArCMnM,IAA+B,IAA9B,KAAEK,EAAI,eAAEuL,GAAgB5L,EAC5C,OACEkC,eAAC8E,IAAG,CACFzD,QAASqI,EACTR,OAAO,UACP7F,GAAG,UACH6G,OAAQ,CACNC,WAAY,UACZrJ,MAAO,SAETmE,EAAE,OACFyD,QAAQ,OACRV,WAAW,SACXlH,MAAM,QACN+I,GAAI,EACJC,GAAI,EACJlE,GAAI,EACJT,aAAa,KAAIpH,SAAA,CAEjBmB,cAAC6J,IAAM,CACLE,GAAI,EACJjI,KAAK,KACLkI,OAAO,UACPrG,KAAM1E,EAAK0E,KACXsF,IAAKhK,EAAK8E,MAEZjD,eAAC8E,IAAG,CAAA/G,SAAA,CACFmB,cAACmG,IAAI,CAAAtH,SAAEI,EAAK0E,OACZ7C,eAACqF,IAAI,CAACC,SAAS,KAAIvH,SAAA,CACjBmB,cAAA,KAAAnB,SAAG,aACFI,EAAKuB,gBCwPD0K,OAjQctM,IAAmD,IAAlD,cAAEuM,EAAa,WAAEC,EAAU,cAAEC,GAAezM,EACxE,MAAM,OAAEiJ,EAAM,OAAEC,EAAM,QAAEC,GAAYC,eAC7BsD,EAAeC,GAAoBvM,sBACnCwM,EAAQC,GAAazM,mBAAS,KAC9B0M,EAAcC,GAAmB3M,mBAAS,KAC1C4B,EAASC,GAAc7B,oBAAS,IAChC4M,EAAeC,GAAoB7M,oBAAS,GAC7CsB,EAAQC,eAER,aAAEzB,EAAY,gBAAEC,EAAe,KAAEE,GAASR,IAsE1CqN,EAAgBtJ,UACpB,GAAI1D,EAAa4I,MAAMqE,MAAMC,GAAMA,EAAE5E,MAAQ6E,EAAM7E,MACjD9G,EAAM,CACJmC,MAAO,yBACPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAKd,GAAI/D,EAAaoN,WAAW9E,MAAQnI,EAAKmI,IAAzC,CAWA,IACEvG,GAAW,GACX,MAAMiC,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAADjC,OAAYjL,EAAKmN,UAG5B,KAAEpJ,SAAeC,IAAMoJ,IAAI,qBAE/B,CACEC,OAAQxN,EAAasI,IACrBH,OAAQgF,EAAM7E,KAEhBtE,GAGF/D,EAAgBiE,GAChBqI,GAAeD,GACfvK,GAAW,GACX,MAAOwC,GACP/C,EAAM,CACJmC,MAAO,iBACPa,YAAaD,EAAME,SAASP,KAAKQ,QACjCd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZhC,GAAW,GAEb0K,EAAiB,SAxCfjL,EAAM,CACJmC,MAAO,+BACPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,YAsCV0J,EAAe/J,UACnB,GAAI1D,EAAaoN,WAAW9E,MAAQnI,EAAKmI,KAAO6E,EAAM7E,MAAQnI,EAAKmI,IAAnE,CAWA,IACEvG,GAAW,GACX,MAAMiC,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAADjC,OAAYjL,EAAKmN,UAG5B,KAAEpJ,SAAeC,IAAMoJ,IAAI,wBAE/B,CACEC,OAAQxN,EAAasI,IACrBH,OAAQgF,EAAM7E,KAEhBtE,GAGFmJ,EAAM7E,MAAQnI,EAAKmI,IAAMrI,IAAoBA,EAAgBiE,GAC7DqI,GAAeD,GACfD,IACAtK,GAAW,GACX,MAAOwC,GACP/C,EAAM,CACJmC,MAAO,iBACPa,YAAaD,EAAME,SAASP,KAAKQ,QACjCd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZhC,GAAW,GAEb0K,EAAiB,SAzCfjL,EAAM,CACJmC,MAAO,kCACPC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,YAuChB,OACE/B,eAAAmH,WAAA,CAAApJ,SAAA,CACEmB,cAACkI,IAAU,CAACrC,EAAG,CAAEsC,KAAM,QAAUC,KAAMpI,cAACqI,IAAQ,IAAKlG,QAAS2F,IAE9DhH,eAACwH,IAAK,CAACP,QAASA,EAASF,OAAQA,EAAQU,YAAU,EAAA1J,SAAA,CACjDmB,cAACwI,IAAY,IACb1H,eAAC2H,IAAY,CAAA5J,SAAA,CACXmB,cAAC0I,IAAW,CACVtC,SAAS,OACTC,WAAW,YACXR,EAAE,OACFC,eAAe,SAAQjH,SAEtBC,EAAa0N,WAGhBxM,cAAC2I,IAAgB,IACjB7H,eAAC8H,IAAS,CAAC/C,EAAE,OAAOgD,QAAQ,SAASC,WAAW,SAAQjK,SAAA,CACtDmB,cAAC4F,IAAG,CAACG,EAAE,OAAOF,EAAE,OAAO4G,SAAS,OAAOC,GAAI,EAAE7N,SAC1CC,EAAa4I,MAAM6B,KAAKyC,GACvBhM,cAACuK,EAAa,CAEZtL,KAAM+M,EACNvB,MAAO3L,EAAaoN,WACpB1B,eAAgBA,IAAM+B,EAAaP,IAH9BA,EAAE5E,SAObtG,eAACG,IAAW,CAAC4E,EAAE,OAAMhH,SAAA,CACnBmB,cAACqB,IAAK,CACJE,YAAY,YACZmF,GAAI,EACJxG,MAAOoL,EACP9J,SAAWC,GAAM8J,EAAiB9J,EAAEC,OAAOxB,SAE7CF,cAACiC,IAAM,CACLuE,QAAQ,QACRnE,YAAY,OACZsK,GAAI,EACJlJ,UAAWmI,EACXzJ,QApLOK,UACnB,GAAK8I,EAAL,CAEA,IACEO,GAAiB,GACjB,MAAM/I,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAADjC,OAAYjL,EAAKmN,UAG5B,KAAEpJ,SAAeC,IAAMoJ,IAAI,mBAE/B,CACEC,OAAQxN,EAAasI,IACrBoF,SAAUlB,GAEZxI,GAGF0B,QAAQC,IAAIzB,EAAKoE,KAEjBrI,EAAgBiE,GAChBqI,GAAeD,GACfS,GAAiB,GACjB,MAAOxI,GACP/C,EAAM,CACJmC,MAAO,iBACPa,YAAaD,EAAME,SAASP,KAAKQ,QACjCd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZgJ,GAAiB,GAEnBN,EAAiB,MAiJiB1M,SACvB,cAIHmB,cAACiB,IAAW,CAAApC,SACVmB,cAACqB,IAAK,CACJE,YAAY,oBACZmF,GAAI,EACJlF,SAAWC,GA3NJe,WAEnB,GADAiJ,EAAUmB,GACLA,EAIL,IACE/L,GAAW,GACX,MAAMiC,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAADjC,OAAYjL,EAAKmN,UAG5B,KAAEpJ,SAAeC,IAAM4J,IAAI,oBAAD3C,OAAqBsB,GAAU1I,GAC/D0B,QAAQC,IAAIzB,GACZnC,GAAW,GACX8K,EAAgB3I,GAChB,MAAOK,GACP/C,EAAM,CACJmC,MAAO,iBACPa,YAAa,oCACbZ,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAEZhC,GAAW,KAiMgBiM,CAAarL,EAAEC,OAAOxB,WAI1CU,EACCZ,cAAC+M,IAAO,CAACjL,KAAK,OAEF,OAAZ4J,QAAY,IAAZA,OAAY,EAAZA,EAAcnC,KAAKtK,GACjBe,cAAC+K,EAAY,CAEX9L,KAAMA,EACNuL,eAAgBA,IAAMsB,EAAc7M,IAF/BA,EAAKmI,UAOlBpH,cAACoJ,IAAW,CAAAvK,SACVmB,cAACiC,IAAM,CAACE,QAASA,IAAMoK,EAAatN,GAAOoD,YAAY,MAAKxD,SAAC,4BC7PzE,IAAImO,GAAQC,GA6PGC,OA3PItO,IAAoC,IAAnC,WAAEwM,EAAU,cAAEC,GAAezM,EAC/C,MAAOmI,EAAUoG,GAAenO,mBAAS,KAClC4B,EAASC,GAAc7B,oBAAS,IAChCoO,EAAYC,GAAiBrO,mBAAS,KACtCsO,EAAiBC,GAAsBvO,oBAAS,IAChDwO,EAAQC,GAAazO,oBAAS,IAC9B0O,EAAUC,GAAe3O,oBAAS,GACnCsB,EAAQC,cAERqN,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeA,EACfC,iBAAkB,CAChBC,oBAAqB,oBAGnB,aAAEnP,EAAY,gBAAEC,EAAe,KAAEE,EAAI,aAAEE,EAAY,gBAAEC,GACzDX,IAEI0M,EAAgB3I,UACpB,GAAK1D,EAEL,IACE,MAAMgE,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAADjC,OAAYjL,EAAKmN,SAIlCvL,GAAW,GAEX,MAAM,KAAEmC,SAAeC,IAAM4J,IAAI,gBAAD3C,OACdpL,EAAasI,KAC7BtE,GAEFqK,EAAYnK,GACZnC,GAAW,GAEXmM,GAAOkB,KAAK,YAAapP,EAAasI,KACtC,MAAO/D,GACPmB,QAAQC,IAAI,2BAA4BpB,GACxC/C,EAAM,CACJmC,MAAO,iBACPa,YAAa,8BACbZ,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,aAwChBpD,qBAAU,MACRuN,GAASmB,IA5FI,0BA6FND,KAAK,QAASjP,GACrB+N,GAAOoB,GAAG,aAAa,IAAMb,GAAmB,KAChDP,GAAOoB,GAAG,UAAU,IAAMT,GAAY,KACtCX,GAAOoB,GAAG,eAAe,IAAMT,GAAY,KAEpC,KACLX,GAAOqB,IAAI,aACXrB,GAAOqB,IAAI,UACXrB,GAAOqB,IAAI,kBAEZ,CAACpP,IAEJQ,qBAAU,KACR0L,IAEA8B,GAAsBnO,IACrB,CAACA,IAEJW,qBAAU,KACRuN,GAAOoB,GAAG,oBAAqBE,IAE1BrB,IACDA,GAAoB7F,MAAQkH,EAAmBC,KAAKnH,IAOpD+F,EAAY,IAAIpG,EAAUuH,IALrBnP,EAAaqP,SAASF,KACzBlP,EAAgB,CAACkP,KAAuBnP,IACxCkM,GAAeD,OAOd,KACL4B,GAAOqB,IAAI,uBAEZ,CAACtH,EAAU5H,EAAciM,EAAY6B,KAuBxC,OACEjN,cAAAiI,WAAA,CAAApJ,SACGC,EACCgC,eAAAmH,WAAA,CAAApJ,SAAA,CACEiC,eAACqF,IAAI,CACHC,SAAU,CAAE+B,KAAM,OAAQgB,GAAI,QAC9BuD,GAAI,EACJ/B,GAAI,EACJ5E,EAAE,OACFM,WAAW,YACXR,EAAE,OACFC,eAAgB,CAAEqC,KAAM,iBACxBW,WAAW,SAAQjK,SAAA,CAEnBmB,cAACkI,IAAU,CACTrC,EAAG,CAAEsC,KAAM,OAAQgB,GAAI,QACvBf,KAAMpI,cAACyO,IAAa,IACpBtM,QAASA,IAAMpD,EAAgB,MAEhCgI,IACGjI,EAAa4P,YAQb5N,eAAAmH,WAAA,CAAApJ,SAAA,CACGC,EAAa0N,SAASmC,cACvB3O,cAACkL,GAAoB,CACnBC,cAAeA,EACfC,WAAYA,EACZC,cAAeA,OAZnBvK,eAAAmH,WAAA,CAAApJ,SAAA,CACG2I,EAAUvI,EAAMH,EAAa4I,OAC9B1H,cAAC4H,EAAY,CACX3I,MNvJUwI,EMuJUxI,ENvJEyI,EMuJI5I,EAAa4I,MNtJlDA,EAAM,GAAGN,MAAQK,EAAWL,IAAMM,EAAM,GAAKA,EAAM,aMoKlD5G,eAAC8E,IAAG,CACFC,EAAE,OACFgD,QAAQ,SACR/C,eAAe,WACf1B,EAAG,EACHD,GAAG,UACH4B,EAAE,OACF7D,EAAE,OACF+D,aAAa,KACb2I,UAAU,SAAQ/P,SAAA,CAEjB+B,EACCZ,cAAC+M,IAAO,CACNjL,KAAK,KACLiE,EAAG,GACH7D,EAAG,GACH2M,UAAU,SACVC,OAAO,SAGT9O,cAAA,OAAK+O,UAAU,WAAUlQ,SACvBmB,cAACqJ,EAAc,CAACtC,SAAUA,MAI9BjG,eAACG,IAAW,CACV+N,UAhKQxM,UAClB,GAAkB,UAAdyM,EAAMC,KAAmB9B,EAAY,CACvCJ,GAAOkB,KAAK,cAAepP,EAAasI,KACxC,IACE,MAAMtE,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBoJ,cAAc,UAADjC,OAAYjL,EAAKmN,SAGlCiB,EAAc,IACd,MAAM,KAAErK,SAAeC,IAAMC,KAC3B,eACA,CACEoH,QAAS8C,EACTd,OAAQxN,GAEVgE,GAEFkK,GAAOkB,KAAK,cAAelL,GAC3BmK,EAAY,IAAIpG,EAAU/D,IAC1B,MAAOK,GACPmB,QAAQC,IAAI,yBAA0BpB,GACtC/C,EAAM,CACJmC,MAAO,iBACPa,YAAa,6BACbZ,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,cAoIN3B,GAAG,aACHC,YAAU,EACV2I,GAAI,EAAEjL,SAAA,CAEL6O,EACC1N,cAAA,OAAAnB,SACEmB,cAACmP,IAAM,CACLC,QAASxB,EAET5L,MAAO,GACPM,MAAO,CAAE+M,aAAc,GAAIlF,WAAY,OAI3CnK,cAAAiI,WAAA,IAEFjI,cAACqB,IAAK,CACJmF,QAAQ,SACRrC,GAAG,UACH5C,YAAY,oBACZrB,MAAOkN,EACP5L,SA3GSC,IAGrB,GAFA4L,EAAc5L,EAAEC,OAAOxB,QAElBoN,EAAiB,OAEjBE,IACHC,GAAU,GACVT,GAAOkB,KAAK,SAAUpP,EAAasI,MAErC,IAAIkI,GAAiB,IAAIC,MAAOC,UAEhCC,YAAW,MACK,IAAIF,MAAOC,UACAF,GAHT,KAIe9B,IAC7BR,GAAOkB,KAAK,cAAepP,EAAasI,KACxCqG,GAAU,MANI,iBAuGdzN,cAAC4F,IAAG,CAACC,EAAE,OAAOiD,WAAW,SAAShD,eAAe,SAAS5D,EAAE,OAAMrD,SAChEmB,cAACmG,IAAI,CAACC,SAAS,MAAMsG,GAAI,EAAGrG,WAAW,YAAWxH,SAAC,0CN5NhC6Q,IAACjI,EAAYC,GOlB3BiI,OAnBC/Q,IAAoC,IAAnC,WAAEwM,EAAU,cAAEC,GAAezM,EAC5C,MAAM,aAAEE,GAAiBL,IAEzB,OACEuB,cAAC4F,IAAG,CACFC,EAAG,CAAEsC,KAAMrJ,EAAe,OAAS,OAAQqK,GAAI,QAC/CL,WAAW,SACXD,QAAQ,SACRzE,EAAG,EACHD,GAAG,QACH4B,EAAG,CAAEoC,KAAM,OAAQgB,GAAI,OACvBlD,aAAa,KACb2J,YAAY,MAAK/Q,SAEjBmB,cAACkN,GAAU,CAAC9B,WAAYA,EAAYC,cAAeA,O,oBCG1CwE,OAnBKA,IAEhB/O,eAACgP,IAAK,CAAAjR,SAAA,CACJmB,cAAC+P,KAAQ,CAACC,OAAO,SACjBhQ,cAAC+P,KAAQ,CAACC,OAAO,SACjBhQ,cAAC+P,KAAQ,CAACC,OAAO,SACjBhQ,cAAC+P,KAAQ,CAACC,OAAO,SACjBhQ,cAAC+P,KAAQ,CAACC,OAAO,SACjBhQ,cAAC+P,KAAQ,CAACC,OAAO,SACjBhQ,cAAC+P,KAAQ,CAACC,OAAO,SACjBhQ,cAAC+P,KAAQ,CAACC,OAAO,SACjBhQ,cAAC+P,KAAQ,CAACC,OAAO,SACjBhQ,cAAC+P,KAAQ,CAACC,OAAO,SACjBhQ,cAAC+P,KAAQ,CAACC,OAAO,SACjBhQ,cAAC+P,KAAQ,CAACC,OAAO,YCgLRC,OA5KQrR,IAAmB,IAAlB,SAAEC,GAAUD,EAClC,MAAM,OAAEiJ,EAAM,OAAEC,EAAM,QAAEC,GAAYC,eAC7BsD,EAAeC,GAAoBvM,sBACnCkR,EAAeC,GAAoBnR,mBAAS,KAC5CwM,EAAQC,GAAazM,mBAAS,KAC9B0M,EAAcC,GAAmB3M,mBAAS,KAC1C4B,EAASC,GAAc7B,oBAAS,GACjCsB,EAAQC,eAER,KAAEtB,EAAI,MAAEI,EAAK,SAAEC,GAAab,IAiGlC,OACEqC,eAAAmH,WAAA,CAAApJ,SAAA,CACEmB,cAAA,QAAMmC,QAAS2F,EAAOjJ,SAAEA,IAExBiC,eAACwH,IAAK,CAACP,QAASA,EAASF,OAAQA,EAAQU,YAAU,EAAA1J,SAAA,CACjDmB,cAACwI,IAAY,IACb1H,eAAC2H,IAAY,CAAA5J,SAAA,CACXmB,cAAC0I,IAAW,CACVtC,SAAS,OACTC,WAAW,YACXR,EAAE,OACFC,eAAe,SAAQjH,SACxB,sBAGDmB,cAAC2I,IAAgB,IACjB7H,eAAC8H,IAAS,CAAC/C,EAAE,OAAOgD,QAAQ,SAASC,WAAW,SAAQjK,SAAA,CACtDmB,cAACiB,IAAW,CAAApC,SACVmB,cAACqB,IAAK,CACJE,YAAY,YACZmF,GAAI,EACJlF,SAAWC,GAAM8J,EAAiB9J,EAAEC,OAAOxB,WAG/CF,cAACiB,IAAW,CAAApC,SACVmB,cAACqB,IAAK,CACJE,YAAY,mCACZmF,GAAI,EACJlF,SAAWC,GA5GJe,WAEnB,GADAiJ,EAAUmB,GACLA,EAIL,IACE/L,GAAW,GACX,MAAMiC,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAADjC,OAAYjL,EAAKmN,UAG5B,KAAEpJ,SAAeC,IAAM4J,IAAI,oBAAD3C,OAAqBsB,GAAU1I,GAC/D0B,QAAQC,IAAIzB,GACZnC,GAAW,GACX8K,EAAgB3I,GAChB,MAAOK,GACP/C,EAAM,CACJmC,MAAO,iBACPa,YAAa,oCACbZ,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,kBAoFeiK,CAAarL,EAAEC,OAAOxB,WAG3CF,cAAC4F,IAAG,CAACG,EAAE,OAAOF,EAAE,OAAO4G,SAAS,OAAM5N,SACnCqR,EAAc3G,KAAKyC,GAClBhM,cAACuK,EAAa,CAEZtL,KAAM+M,EACNxB,eAAgBA,KAAM4F,OAvFhBC,EAuF6BrE,OAtFjDmE,EAAiBD,EAAcI,QAAQC,GAAQA,EAAInJ,MAAQiJ,EAAQjJ,OAD/CiJ,QAqFDrE,EAAE5E,SAMZxG,EAECZ,cAAA,OAAAnB,SAAK,eAEO,OAAZ6M,QAAY,IAAZA,OAAY,EAAZA,EACI8E,MAAM,EAAG,GACVjH,KAAKtK,GACJe,cAAC+K,EAAY,CAEX9L,KAAMA,EACNuL,eAAgBA,KAAMiG,OAjJnBC,EAiJ+BzR,OAhJ9CiR,EAAc1B,SAASkC,GACzBpQ,EAAM,CACJmC,MAAO,qBACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,QAKdsN,EAAiB,IAAID,EAAeQ,KAZjBA,QA+IEzR,EAAKmI,UAOpBpH,cAACoJ,IAAW,CAAAvK,SACVmB,cAACiC,IAAM,CAACE,QAvGGK,UACnB,GAAK8I,GAAkB4E,EAWvB,IACE,MAAMpN,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAADjC,OAAYjL,EAAKmN,UAG5B,KAAEpJ,SAAeC,IAAMC,KAAK,kBAEhC,CACES,KAAM2H,EACN5D,MAAO/H,KAAKyD,UAAU8M,EAAc3G,KAAKyC,GAAMA,EAAE5E,QAEnDtE,GAEFxD,EAAS,CAAC0D,KAAS3D,IACnB0I,IACAzH,EAAM,CACJmC,MAAO,0BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WAEZ,MAAOQ,GACP/C,EAAM,CACJmC,MAAO,6BACPa,YAAaD,EAAME,SAASP,KAC5BN,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBAxCZvC,EAAM,CACJmC,MAAO,6BACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,SAgGyBR,YAAY,OAAMxD,SAAC,4BClD/C8R,OA3HC/R,IAAqB,IAApB,WAAEwM,GAAYxM,EAC7B,MAAO6I,EAAYmJ,GAAiB5R,sBAE9B,aAAEF,EAAY,gBAAEC,EAAe,KAAEE,EAAI,MAAEI,EAAK,SAAEC,GAAab,IAE3D6B,EAAQC,cAuCd,OAVAd,qBAAU,KACR,MAAMC,EAAWG,aAAaC,QAAQ,YAClCJ,EACFkR,EAAcjR,KAAKC,MAAMF,IAEzB8E,QAAQnB,MAAM,uCAhCCb,WACjB,IACE,IAAKvD,IAASA,EAAKmN,MACjB,MAAM,IAAIyE,MAAM,0BAGlB,MAAM/N,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAADjC,OAAYjL,EAAKmN,UAI5B,KAAEpJ,SAAeC,IAAM4J,IAAI,YAAa/J,GAC9CxD,EAAS0D,GACT,MAAOK,GACPmB,QAAQnB,MAAM,wBAAyBA,GACvC/C,EAAM,CACJmC,MAAO,kBACPa,YAAaD,EAAMG,SAAW,2BAC9Bd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,kBAYdiO,KACC,CAAC1F,IAGFtK,eAAC8E,IAAG,CACF4D,QAAS,CAAErB,KAAMrJ,EAAe,OAAS,OAAQqK,GAAI,QACrD4H,cAAc,SACdjI,WAAW,SACX1E,EAAG,EACHD,GAAG,QACH4B,EAAG,CAAEoC,KAAM,OAAQgB,GAAI,OACvBlD,aAAa,KACb2J,YAAY,MAAK/Q,SAAA,CAEjBiC,eAAC8E,IAAG,CACF8G,GAAI,EACJ/B,GAAI,EACJvE,SAAU,CAAE+B,KAAM,OAAQgB,GAAI,QAC9B9C,WAAW,YACXmD,QAAQ,OACRzD,EAAE,OACFD,eAAe,gBACfgD,WAAW,SAAQjK,SAAA,CACpB,WAECmB,cAACiQ,GAAc,CAAApR,SACbmB,cAACiC,IAAM,CACLuH,QAAQ,OACRpD,SAAU,CAAE+B,KAAM,OAAQgB,GAAI,OAAQ6H,GAAI,QAC1CC,UAAWjR,cAACkR,KAAO,IAAIrS,SACxB,wBAKLmB,cAAC4F,IAAG,CACF4D,QAAQ,OACRuH,cAAc,SACd3M,EAAG,EACHD,GAAG,UACH4B,EAAE,OACF7D,EAAE,OACF+D,aAAa,KACb2I,UAAU,SAAQ/P,SAEjBQ,EACCW,cAAC8P,IAAK,CAAClB,UAAU,SAAQ/P,SACtBQ,EAAMkK,KAAKgF,GACVzN,eAAC8E,IAAG,CACFzD,QAASA,IAAMpD,EAAgBwP,GAC/BvE,OAAO,UACP7F,GAAIrF,IAAiByP,EAAO,UAAY,UACxC3M,MAAO9C,IAAiByP,EAAO,QAAU,QACzC5D,GAAI,EACJC,GAAI,EACJ3E,aAAa,KAAIpH,SAAA,CAGjBmB,cAACmG,IAAI,CAAAtH,SACD0P,EAAKG,YAEHH,EAAK/B,SADLhF,EAAUC,EAAY8G,EAAK7G,SAGhC6G,EAAK4C,eACJrQ,eAACqF,IAAI,CAACC,SAAS,KAAIvH,SAAA,CACjBiC,eAAA,KAAAjC,SAAA,CAAI0P,EAAK4C,cAAchK,OAAOxD,KAAK,SAClC4K,EAAK4C,cAAc7G,QAAQpD,OAAS,GACjCqH,EAAK4C,cAAc7G,QAAQ8G,UAAU,EAAG,IAAM,MAC9C7C,EAAK4C,cAAc7G,aAZtBiE,EAAKnH,SAmBhBpH,cAAC6P,GAAW,U,6DCmGPwB,OA/Lf,WACE,MAAO7F,EAAQC,GAAazM,mBAAS,KAC9B0M,EAAcC,GAAmB3M,mBAAS,KAC1C4B,EAASC,GAAc7B,oBAAS,IAChCsS,EAAaC,GAAkBvS,oBAAS,IAEzC,gBACJD,EAAe,KACfE,EAAI,aACJE,EAAY,gBACZC,EAAe,MACfC,EAAK,SACLC,GACEb,IAEE6B,EAAQC,eACR,OAAEsH,EAAM,OAAEC,EAAM,QAAEC,GAAYC,cAC9BzI,EAAUC,cA4CVgS,EAAahP,UACjBgC,QAAQC,IAAIwC,GAEZ,IACEsK,GAAe,GACf,MAAMzO,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBoJ,cAAc,UAADjC,OAAYjL,EAAKmN,UAG5B,KAAEpJ,SAAeC,IAAMC,KAAK,YAAa,CAAE+D,UAAUnE,GAEtDzD,EAAM0M,MAAM0F,GAAMA,EAAErK,MAAQpE,EAAKoE,OAAM9H,EAAS,CAAC0D,KAAS3D,IAC/DN,EAAgBiE,GAChBuO,GAAe,GACfxJ,IACA,MAAO1E,GACP/C,EAAM,CACJmC,MAAO,0BACPa,YAAaD,EAAMG,QACnBd,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,kBAKhB,OACE/B,eAAAmH,WAAA,CAAApJ,SAAA,CACEiC,eAAC8E,IAAG,CACFC,EAAE,OACFC,eAAe,gBACfgD,WAAW,SACX3E,GAAG,QACH4B,EAAE,OACF3B,EAAE,oBACFwL,YAAY,MAAK/Q,SAAA,CAEjBmB,cAACyJ,IAAO,CAACC,MAAM,uBAAuBE,UAAQ,EAACD,UAAU,aAAY9K,SACnEiC,eAACmB,IAAM,CAACuE,QAAQ,QAAQrE,QAAS2F,EAAOjJ,SAAA,CACtCmB,cAAA,KAAG+O,UAAU,kBACb/O,cAACmG,IAAI,CAACN,EAAG,CAAEsC,KAAM,OAAQgB,GAAI,QAAUwB,GAAI,EAAE9L,SAAC,qBAKlDmB,cAACmG,IAAI,CAACC,SAAS,MAAMC,WAAW,YAAWxH,SAAC,cAG5CiC,eAAA,OAAAjC,SAAA,CACEiC,eAAC4Q,KAAI,CAAA7S,SAAA,CACHiC,eAAC6Q,KAAU,CAACvN,EAAG,EAAEvF,SAAA,CACfmB,cAAC4R,KAAiB,CAChBC,MAAO1S,EAAa+H,OACpB4K,OAAQC,UAAOC,QAEjBhS,cAACiS,KAAQ,CAAC7L,SAAS,MAAMJ,EAAG,OAE9BlF,eAACoR,KAAQ,CAACpH,GAAI,EAAEjM,SAAA,EACZM,EAAa+H,QAAU,kBACxB/H,EAAaoK,KAAK4I,GACjBnS,cAACoS,KAAQ,CAEPjQ,QAASA,KACPpD,EAAgBoT,EAAM5D,MACtBnP,EAAgBD,EAAamR,QAAQ+B,GAAMA,IAAMF,MACjDtT,SAEDsT,EAAM5D,KAAKG,YAAW,kBAAAxE,OACDiI,EAAM5D,KAAK/B,UAAQ,oBAAAtC,OACjB1C,EAAUvI,EAAMkT,EAAM5D,KAAK7G,SAR9CyK,EAAM/K,aAanBtG,eAAC4Q,KAAI,CAAA7S,SAAA,CACHmB,cAAC2R,KAAU,CAACW,GAAIrQ,IAAQkC,GAAG,QAAQ8M,UAAWjR,cAACuS,KAAe,IAAI1T,SAChEmB,cAAC6J,IAAM,CACL/H,KAAK,KACLkI,OAAO,UACPrG,KAAM1E,EAAK0E,KACXsF,IAAKhK,EAAK8E,QAGdjD,eAACoR,KAAQ,CAAArT,SAAA,CACPiC,eAAC8G,EAAY,CAAC3I,KAAMA,EAAKJ,SAAA,CACvBmB,cAACoS,KAAQ,CAAAvT,SAAC,eAAsB,OAElCmB,cAACwS,KAAW,IACZxS,cAACoS,KAAQ,CAACjQ,QArIAsQ,KACpB5S,aAAa6S,WAAW,YACxBnT,EAAQQ,KAAK,MAmI8BlB,SAAC,uBAM1CiC,eAAC6R,KAAM,CAAChJ,UAAU,OAAO5B,QAASA,EAASF,OAAQA,EAAOhJ,SAAA,CACxDmB,cAAC4S,IAAa,IACd9R,eAAC+R,KAAa,CAAAhU,SAAA,CACZmB,cAAC8S,IAAY,CAACC,kBAAkB,MAAKlU,SAAC,iBACtCiC,eAACkS,IAAU,CAAAnU,SAAA,CACTiC,eAAC8E,IAAG,CAACC,EAAE,OAAO6G,GAAI,EAAE7N,SAAA,CAClBmB,cAACqB,IAAK,CACJE,YAAY,0BACZwI,GAAI,EACJ7J,MAAOsL,EACPhK,SAAWC,GAAMgK,EAAUhK,EAAEC,OAAOxB,SAEtCF,cAACiC,IAAM,CAACE,QAlJCK,UACnB,GAAKgJ,EAWL,IACE3K,GAAW,GAEX,MAAMiC,EAAS,CACbC,QAAS,CACPoJ,cAAc,UAADjC,OAAYjL,EAAKmN,UAI5B,KAAEpJ,SAAeC,IAAM4J,IAAI,oBAAD3C,OAAqBsB,GAAU1I,GAE/DjC,GAAW,GACX8K,EAAgB3I,GAChB,MAAOK,GACP/C,EAAM,CACJmC,MAAO,iBACPa,YAAa,oCACbZ,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,qBA9BZvC,EAAM,CACJmC,MAAO,mCACPC,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,cA2I0BhE,SAAC,UAEhC+B,EACCZ,cAAC6P,GAAW,IAEA,OAAZnE,QAAY,IAAZA,OAAY,EAAZA,EAAcnC,KAAKtK,GACjBe,cAAC+K,EAAY,CAEX9L,KAAMA,EACNuL,eAAgBA,IAAMgH,EAAWvS,EAAKmI,MAFjCnI,EAAKmI,OAMfkK,GAAetR,cAAC+M,IAAO,CAACJ,GAAG,OAAO9G,EAAE,sBCjMlCoN,OAjBEA,KACf,MAAO7H,EAAYC,GAAiBrM,oBAAS,IACvC,KAAEC,GAASR,IAEjB,OACEqC,eAAA,OAAKwB,MAAO,CAAEN,MAAO,QAASnD,SAAA,CAC3BI,GAAQe,cAACqR,GAAU,IACpBvQ,eAAC8E,IAAG,CAACC,EAAE,OAAOC,eAAe,gBAAgBC,EAAE,OAAO7D,EAAE,SAASkC,EAAE,OAAMvF,SAAA,CACtEI,GAAQe,cAAC2Q,GAAO,CAACvF,WAAYA,IAC7BnM,GACCe,cAAC2P,GAAO,CAACvE,WAAYA,EAAYC,cAAeA,WCH3C6H,OATf,WACE,OACEpS,eAAA,OAAKiO,UAAU,MAAKlQ,SAAA,CAClBmB,cAACmT,IAAK,CAACC,KAAK,IAAIC,UAAW7N,EAAU8N,OAAK,IAC1CtT,cAACmT,IAAK,CAACC,KAAK,SAASC,UAAWJ,SCGvBM,OAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqB1O,MAAKnG,IAAkD,IAAjD,OAAE8U,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASlV,EACpE8U,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,mBCEdO,IAASC,OACPhU,cAACiU,KAAc,CAAApV,SACbmB,cAACkU,KAAa,CAAArV,SACZmB,cAACrB,EAAY,CAAAE,SACXmB,cAACkT,GAAG,UAIViB,SAASC,eAAe,SAE1Bb,O","file":"static/js/main.e1fb3475.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  const { setUser } = ChatState();\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n          sx={{\n            \"::placeholder\": {\n              color: \"black\",\n            },\n          }}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n            sx={{\n              \"::placeholder\": {\n                color: \"black\",\n              },\n            }}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n    </VStack>\n  );\n};\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"chat-app-shashank\");\n      fetch(\"https://api.cloudinary.com/v1_1/chat-app-shashank/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n          sx={{\n            \"::placeholder\": {\n              color: \"black\",\n            },\n          }}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n          bg=\"transparent\"\n          sx={{\n            \"::placeholder\": {\n              color: \"black\",\n            },\n          }}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n            sx={{\n              \"::placeholder\": {\n                color: \"black\",\n              },\n            }}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n            sx={{\n              \"::placeholder\": {\n                color: \"black\",\n              },\n            }}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n          sx={{\n            \"::placeholder\": {\n              color: \"black\",\n            },\n          }}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"rgba(255, 255, 255, 0.1)\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        backdropFilter=\"blur(10px)\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\" color=\"white\">\n          Chit-Chat\n        </Text>\n      </Box>\n      <Box\n        bg=\"rgba(255, 255, 255, 0.1)\"\n        w=\"100%\"\n        p={4}\n        borderRadius=\"lg\"\n        backdropFilter=\"blur(10px)\"\n      >\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab color=\"white\">Login</Tab>\n            <Tab color=\"white\">Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n\nconst UserListItem = ({ user, handleFunction }) => {\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      display=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\";\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      console.log(\"Error fetching messages:\", error);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        console.log(\"Error sending message:\", error);\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    return () => {\n      socket.off(\"connected\");\n      socket.off(\"typing\");\n      socket.off(\"stop typing\");\n    };\n  }, [user]);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare ||\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n\n    return () => {\n      socket.off(\"message recieved\");\n    };\n  }, [messages, notification, fetchAgain, selectedChatCompare]);\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text, Button } from \"@chakra-ui/react\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    try {\n      if (!user || !user.token) {\n        throw new Error(\"User not authenticated\");\n      }\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      console.error(\"Error fetching chats:\", error);\n      toast({\n        title: \"Error Occurred!\",\n        description: error.message || \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    const userInfo = localStorage.getItem(\"userInfo\");\n    if (userInfo) {\n      setLoggedUser(JSON.parse(userInfo));\n    } else {\n      console.error(\"User info not found in localStorage\");\n    }\n    fetchChats();\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        display=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            display=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Chit-Chat\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}